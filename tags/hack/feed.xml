<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hack on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/hack.html</link>
    <description>Recent content in Hack on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kris-blog@koehntopp.de (Kristian Köhntopp)</managingEditor>

    
    <webMaster>kris-blog@koehntopp.de (Kristian Köhntopp)</webMaster>

    
    <lastBuildDate>Wed, 14 May 2025 08:54:20 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/hack/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sshpass</title>
      <link>https://blog.koehntopp.info/2023/09/15/sshpass.html</link>
      <pubDate>Fri, 15 Sep 2023 01:02:03 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2023/09/15/sshpass.html</guid>
      <description>&lt;p&gt;Heute lernte ich, daß das Utility &lt;code&gt;sshpass&lt;/code&gt; existiert.
Ich habe das beim Lesen eines &lt;code&gt;.gitlab.ci.yml&lt;/code&gt; Files gelernt.
Und ihr wundert Euch, wieso Sysadmins alle Schwarz tragen und an Whisky interessiert sind.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2023/09/sshpass-01.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Was ist &lt;code&gt;sshpass&lt;/code&gt; werdet ihr jetzt fragen?&lt;/p&gt;
&lt;p&gt;Und
&lt;a href=&#34;https://www.redhat.com/sysadmin/ssh-automation-sshpass&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RedHat&lt;/a&gt;


erklärt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The sshpass utility is designed to run SSH using the keyboard-interactive password authentication mode,
but in a non-interactive way.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Warum der Artikel jetzt nach und vor diesem Satz dann erklärt,
wie man das &lt;em&gt;benutzt&lt;/em&gt;, statt zu zeigen, warum man das &lt;em&gt;nie braucht&lt;/em&gt; und &lt;em&gt;wie man es ersetzt&lt;/em&gt; ist unklar.&lt;/p&gt;
&lt;p&gt;Aber Homebrew &lt;del&gt;ist&lt;/del&gt; war hilfreich:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; brew search sshpass
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;==&amp;gt; Formulae
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sshs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;If you meant &amp;#34;sshpass&amp;#34; specifically:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;We won&amp;#39;t add sshpass because it makes it too easy for novice SSH users to ruin SSH&amp;#39;s security.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Das fasst es in etwa zusammen, was Homebrew nicht daran hinderte, sshpass wieder aus der Blacklist zu entfernen:
&lt;a href=&#34;https://github.com/Homebrew/brew/pull/15979&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/Homebrew/brew/pull/15979&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Okay, einmal das ganze gitlab, alle &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;, alle Branches, nach &lt;code&gt;sshpass -p&lt;/code&gt; suchen.&lt;/p&gt;
&lt;h2 id=&#34;es-wird-schlimmer&#34;&gt;
    &lt;a href=&#34;#es-wird-schlimmer&#34;&gt;
	Es wird schlimmer
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Ich konnte das nicht auf sich beruhen lassen, obwohl es Dinge gibt, bei denen einem das Wissen mehr schadet als das Unwissen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/32255660/how-to-install-sshpass-on-mac&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stackoverflow weiß&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How to install sshpass on Mac?&lt;/p&gt;
&lt;p&gt;Accepted Answer:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -L https://raw.githubusercontent.com/&amp;lt;...&amp;gt;Formula/sshpass.rb &amp;gt; sshpass.rb &amp;amp;&amp;amp; \
brew install sshpass.rb &amp;amp;&amp;amp; \
rm sshpass.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;Ich will hochgebeamt werden. Hier ist kein intelligentes Leben möglich.&lt;/p&gt;
&lt;h2 id=&#34;an-die-zwischenrufer&#34;&gt;
    &lt;a href=&#34;#an-die-zwischenrufer&#34;&gt;
	An die Zwischenrufer
    &lt;/a&gt;
&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Aber ich brauche das doch, weil mein BMC keine Keys &amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/seveas/python-hpilo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hpilo&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/bmc-toolbox/bmcbutler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bmcbutler&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/bmc-toolbox/dora&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dora&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normal wird man die entsprechenden Zertifikate und Pubkeys beim Start der VM oder des Containers durch &lt;code&gt;cloud-init&lt;/code&gt; installieren,
nachdem sie von der Controlplane des Clusters da hin transportiert worden sind.
Bei Bare Metal kann der Installserver die Bootstrap-Pubkeys als Teil der Customization des Installationsprozesses mit installieren.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Arista Type 7 Passwords</title>
      <link>https://blog.koehntopp.info/2021/11/22/arista-type-7-passwords.html</link>
      <pubDate>Sun, 21 Nov 2021 17:29:00 +0100</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2021/11/22/arista-type-7-passwords.html</guid>
      <description>&lt;p&gt;A friend of mine wanted to provision BGP passwords for their Arista switch configuration.&lt;/p&gt;
&lt;p&gt;So a config stanza such as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;router bgp 65001
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   router-id 10.1.1.1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   neighbor mydevices peer-group
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   neighbor mydevices password 7 8kjYaye5DsQh0epELyKNe0oZ3E3zp39X
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;requires generation of the Password (actually &amp;ldquo;supersecretpassword&amp;rdquo;) in an encrypted form.&lt;/p&gt;
&lt;p&gt;Arista switches can do this using CLI tools, apparently.
They seem to have an onboard Linux, which seems to provide limited tooling, but is good enough to run a 32-bit Python 3.7.
Arista provides modules to help with handling their configuration.
&lt;a href=&#34;https://medium.com/@what_if/encrypting-decrypting-arista-bgp-bmp-ospf-passwords-ff2072460942&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ryan Gelobter&lt;/a&gt;


documented these in an article on Medium.&lt;/p&gt;
&lt;p&gt;Unfortunately, these modules are not well portable.
They have been implemented in a CPython module for Python 3.7 on i386 (32bit) Linux.
They also have a lot of dependencies to other shared objects that are not easily available except in the switch environment.&lt;/p&gt;
&lt;p&gt;So, if you wanted to provision switch configurations,
you would need to run some code on the switch to generate the passwords the way Ryan Gelobter documents,
or do the same in a virtual machine with a virtual switch running in it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;switch1# bash python -c &amp;#39;import DesCrypt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;print DesCrypt.encrypt(&amp;#34;BMP1_passwd&amp;#34;, &amp;#34;supersecretpassword&amp;#34;)&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;JieKbldfLyl9IzUBJZRvKIcc1w5wWogI
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the &lt;code&gt;DesCrypt.py&lt;/code&gt; is not particularly helpful:
The code in it does little more than&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;_DesCrypt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;encryptedData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_DesCrypt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cbcEncrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and &lt;code&gt;_DesCrypt&lt;/code&gt; is actually &lt;code&gt;_Descrypt.cpython-37m-i386-linux-gnu.so&lt;/code&gt;.
Well, at least it is only 10 KB in size, so how hard can it be?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s have a look:&lt;/p&gt;
&lt;h1 id=&#34;ghidra&#34;&gt;
    &lt;a href=&#34;#ghidra&#34;&gt;
	Ghidra
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;When we drop the module into Ghidra, we get to see a &lt;code&gt;PyInit__DesCrypt(void)&lt;/code&gt; symbol.
The code in that function just calls out to &lt;code&gt;PyModuleCreate2(&amp;amp;PyModuleDef, 0x3f5)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Looking at the &lt;code&gt;PyModuleDef&lt;/code&gt; requires &lt;a href=&#34;https://docs.python.org/3/c-api/module.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the documentation&lt;/a&gt;

 to properly understand what is going on.
We identify two functions, &lt;code&gt;cbcEncrypt&lt;/code&gt; and &lt;code&gt;cbcDecrypt&lt;/code&gt; by their &lt;a href=&#34;https://docs.python.org/3/c-api/structures.html#c.PyMethodDef&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;PyMethodDef&lt;/code&gt;&lt;/a&gt;

 entries.
Two labels for entry points in a stripped binary identified.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2021/11/arista-pymethoddef.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Python Method Definition Table for the _DesCrypt Module defines two functions, named &lt;code&gt;cbcEncrypt&lt;/code&gt; and &lt;code&gt;cbcDecrypt&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Looking at the &lt;code&gt;cbcEncrypt&lt;/code&gt; function shows us that it has a dependency on &lt;code&gt;cbc_crypt()&lt;/code&gt;,
and that seems to be a function from &lt;code&gt;libc&lt;/code&gt;, according to &lt;a href=&#34;https://linux.die.net/man/3/cbc_crypt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the manpage&lt;/a&gt;

.
So it is ancient DES, in CBC mode that is being used.
We should be able to do this in pure Python without many additional dependencies then.&lt;/p&gt;
&lt;p&gt;Using Ghidra more, we can decode &lt;code&gt;cbcEncrypt()&lt;/code&gt; and the &lt;code&gt;getHashedKey()&lt;/code&gt; function it calls.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getHashedKey&lt;/code&gt; generates the key the usual way, by xor-ing the incoming string with itself in an 8 bytes long ring buffer, but the starting value is not all zeroes, but some magic value (&lt;code&gt;238ad5f51ec9a8d5&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;cbcEncrypt&lt;/code&gt; pads the data to an even 8 byte boundary as required by DES.
How much was padded needs to be embedded in the ciphertext.
There is a selection of standard methods for this, as offered for example by
&lt;a href=&#34;https://pycryptodome.readthedocs.io/en/latest/src/util/util.html#Crypto.Util.Padding.pad&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Crypto.Util.Padding.pad()&lt;/a&gt;


in pycryptodome (&amp;ldquo;pkcs7&amp;rdquo;, &amp;ldquo;iso7816&amp;rdquo; and &amp;ldquo;x923&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cbcEncrypt&lt;/code&gt; uses none of these standard methods, and implements its own method:
the padding is encoded in the high nibble of a fixed magic int.&lt;/p&gt;
&lt;p&gt;That magic int is always prepended, even if no padding was necessary:
We get &lt;code&gt;?ebb884c&lt;/code&gt;, with &lt;code&gt;?&lt;/code&gt; indicating the number of padbytes (&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;7&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2021/11/arista-gethashedkey.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ghidra Output of the getHashedKey() function, with a bit of annotation and typing added to get a better view.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With this information, we should be able to recreate the function in our own C-code and check if it can recreate the examples Ryan Gelobter provided.&lt;/p&gt;
&lt;p&gt;Of course, it does not.&lt;/p&gt;
&lt;h1 id=&#34;debugging-the-original-code&#34;&gt;
    &lt;a href=&#34;#debugging-the-original-code&#34;&gt;
	Debugging the original code
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;We need to debug, and in order to be able to do that we need to be able to load and isolate &lt;code&gt;getHashedKey()&lt;/code&gt; first.
The original version, to check what the actual hashed key should look like, and compare the result to our own.&lt;/p&gt;
&lt;p&gt;That should be easy:
An example
&lt;a href=&#34;https://blog.koehntopp.info/2005/10/08/dynamisch-geladener-code.html&#34;&gt;from 2005&lt;/a&gt;


(german language article) shows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to turn a function into a &lt;code&gt;libsomething.a&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;then into &lt;code&gt;libsomething.so&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;then how to &lt;code&gt;dlopen()&lt;/code&gt; and &lt;code&gt;dlsym()&lt;/code&gt; that binary to call a single function in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That final piece of code will serve us well:
We want to load the _DesCrypt module and call &lt;code&gt;getHashedKey()&lt;/code&gt; in an isolated context to see what a correct return value looks like.&lt;/p&gt;
&lt;h1 id=&#34;dependencies&#34;&gt;
    &lt;a href=&#34;#dependencies&#34;&gt;
	Dependencies
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Turns out, loading &lt;code&gt;_DesCrypt...so&lt;/code&gt; is not so easy, because of a dependency on &lt;code&gt;libtac.so.0&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ldd _DesCrypt.cpython-37m-i386-linux-gnu.so
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;        linux-gate.so.1 (0xf7f7c000)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;        libtac.so.0 =&amp;gt; not found
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;        libpython3.7m.so.1.0 =&amp;gt; not found
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;        libstdc++.so.6 =&amp;gt; /lib32/libstdc++.so.6 (0xf7d81000)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;        libm.so.6 =&amp;gt; /lib32/libm.so.6 (0xf7c7d000)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;        libgcc_s.so.1 =&amp;gt; /lib32/libgcc_s.so.1 (0xf7c5e000)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;        libc.so.6 =&amp;gt; /lib32/libc.so.6 (0xf7a73000)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;        /lib/ld-linux.so.2 (0xf7f7e000)```
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So we are missing two libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libpython3.7m.so.1.0&lt;/code&gt; and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libtac.so.0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Python bit is fixed by building a Python-3.7 in 32-bit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; apt install gcc-multilib
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; wget https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; tar xzf Python-3.7.5.tgz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; Python-3.7.5/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ./configure --build&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;i686-pc-linux-gnu &lt;span class=&#34;nv&#34;&gt;CFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-m32 &lt;span class=&#34;nv&#34;&gt;CXXFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-m32 &lt;span class=&#34;nv&#34;&gt;LDFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-m32 --enable-shared
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; make -j6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A minor roadbump: We need to build for 32-bit, but on a 64-bit machine.
The compile-flag &lt;code&gt;-m32&lt;/code&gt; does that, but it will fail due to some missing includes until we install &lt;code&gt;gcc-multilib&lt;/code&gt; as shown above.
We can then download the old version of Python, and build it with the required flags for 32-bit support.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;libtac.so.0&lt;/code&gt; we could copy off the switch.
If we try, things escalate quickly .
That is, because that &lt;code&gt;.so&lt;/code&gt; in turn loads even more libraries, most of which we don&amp;rsquo;t have access to.
And if we had them, they might load even more dependencies.&lt;/p&gt;
&lt;p&gt;Looking into Ghidra again, we know that the code we are interested in does not really depend on &lt;code&gt;libtac,so.0&lt;/code&gt;.
&lt;code&gt;cbcEncrypt()&lt;/code&gt; itself does, but only if something goes wrong and an exception is being raised,
but at this stage of our investigation we only want &lt;code&gt;getHashedKey()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Following the guide from 16 years ago, we can quickly write some code to &lt;code&gt;dlopen()&lt;/code&gt; the library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;func_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;mydevices_passwd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;keylen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;supersecretpassword&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;func_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error_msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libhandle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;main start&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;libhandle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dlopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIBNAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RTLD_LAZY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libhandle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dlopen(%s, RTLD_LAZY) failed: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;LIBNAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;dlerror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// find func
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;error_msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dlerror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dlsym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libhandle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;_Z12getHashedKeyPKciPc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;error_msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dlerror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error_msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dlsym(%p, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;getHashedKey&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; failed: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;libhandle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;error_msg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gethashedKey %p&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keylen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keylen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;dlclose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libhandle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;killing-dependencies&#34;&gt;
    &lt;a href=&#34;#killing-dependencies&#34;&gt;
	Killing Dependencies
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;That way we can inspect the output of the function (it overwrites the first 8 bytes of &lt;code&gt;data&lt;/code&gt;) and get a reference key value to debug against.
Or could, if that would work.
It does not, because the &lt;code&gt;.so&lt;/code&gt; we open still has listed &lt;code&gt;libtac.so.0&lt;/code&gt; as &lt;code&gt;NEEDED&lt;/code&gt; and we need to fix it.&lt;/p&gt;
&lt;p&gt;There are many ways to edit ELF binaries, but most are badly maintained.
An easy way is a web service such as &lt;a href=&#34;https://elfy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;elfy.io&lt;/a&gt;

.
We upload the library, click &lt;code&gt;Load information&lt;/code&gt; -&amp;gt; &lt;code&gt;Loader directives&lt;/code&gt; and edit the first dependency (&lt;code&gt;libtac.so.0&lt;/code&gt;) (offset 0x270) to point to the second dependency (&lt;code&gt;libpython3.7m.so.1.0&lt;/code&gt; (offset 0x283) instead.
Downloading the code again, we can rename it to &lt;code&gt;libtest.so&lt;/code&gt; and load it with our test program from above, getting a reference key value.
So &lt;code&gt;mydevices_passwd&lt;/code&gt; in a non-broken implementation yields the raw key value of &lt;code&gt;4A 0E 5D 1A 70 4F 1F 23&lt;/code&gt; for DES.&lt;/p&gt;
&lt;p&gt;Having that, debugging can continue.
It turns out: math is hard and Intel is a little-endian architecture:
The seed byte sequence &lt;code&gt;D5 A8 ... 8A 23&lt;/code&gt; is of course the long &lt;code&gt;238A…A8D5&lt;/code&gt;.
I am definitively not doing these things often enough anymore to not make this kind of mistake.&lt;/p&gt;
&lt;h1 id=&#34;progress&#34;&gt;
    &lt;a href=&#34;#progress&#34;&gt;
	Progress!
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Having a working &lt;code&gt;getHashedKey()&lt;/code&gt; we can now look at &lt;code&gt;cbcEncrypt()&lt;/code&gt; and reverse that.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2021/11/arista-cbcencrypt.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The heart of &lt;code&gt;cbcEncrypt()&lt;/code&gt; fetches two Python &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; and works with them. The &lt;code&gt;key&lt;/code&gt; is processed with &lt;code&gt;getHashedKey()&lt;/code&gt;, then &lt;code&gt;cbc_crypt()&lt;/code&gt; is set up and called. The result returned to Python using &lt;code&gt;Py_BuildValue&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The moment we try to build this in C, it proves frustrating again:
&lt;code&gt;cbc_crypt()&lt;/code&gt; is no longer part of &lt;code&gt;libc&lt;/code&gt;.
It is outdated, legacy, but unfortunately still in use.
Not only by Arista, but also other companies and protocols.
Among them some ancient RPC protocols.
It has been removed from &lt;code&gt;libc&lt;/code&gt; and moved to &lt;code&gt;libtirpc3&lt;/code&gt;, it seems.
We need to install &lt;code&gt;libtirpc3&lt;/code&gt;, &lt;code&gt;libtirpc-dev&lt;/code&gt; and &lt;code&gt;libtirpc-common&lt;/code&gt; to be able to build code that calls &lt;code&gt;cbc_crypt()&lt;/code&gt;.
Even then we seem to be limited to static linking, because for some reason the shared objects do no longer export the symbol.&lt;/p&gt;
&lt;p&gt;Some more short short hiccups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The padding value is a nibble, not a byte, and the long it is part of has to be little endian naturally.&lt;/li&gt;
&lt;li&gt;The padding needs itself to take the 4 bytes added by the padding itself into account.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end we get code that reproduces the expected result.&lt;/p&gt;
&lt;h1 id=&#34;in-python&#34;&gt;
    &lt;a href=&#34;#in-python&#34;&gt;
	In Python
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;If, and that is important, &lt;code&gt;des_parity()&lt;/code&gt; is being called.
In Python that function is not available, and should not be necessary:
The legacy DES function in Python&amp;rsquo;s module supposedly ignores DES parity bits automatically.&lt;/p&gt;
&lt;p&gt;But the Python code produces a different result.
So what goes on here, and how do we get &lt;code&gt;des_parity()&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Turns out, &lt;code&gt;des_parity()&lt;/code&gt; is really weird code:
Look at it &lt;a href=&#34;https://github.com/alisw/libtirpc/blob/master/src/des_soft.c#L33-L50&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

.
It is supposed to make the 8 bytes of the DES code uneven parity by manipulating the low-value bits in the key.
But the actual code also effectively masks out the high order bit, so we do not get 56 bit of keyspace, but only 48 bit.
Yay, export crypto?&lt;/p&gt;
&lt;p&gt;Anyway, this is the code Arista runs for their key obfuscation, so we need to duplicate it to produce correct data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/isotopp/arista_type_7/blob/main/pypoc.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;

 is a PoC in Python.&lt;/p&gt;
&lt;p&gt;With the poc provided, it should be possible to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;arista_descrypt&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cbc_encrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cbc_decrypt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;encrypted&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cbc_encrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mydevices_passwd&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;supersecretpassword&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and that should be sufficient to build an Ansible module for Arista config provisioning.
The code uses &lt;code&gt;cryptography&lt;/code&gt; or &lt;code&gt;pycryptodome&lt;/code&gt; automatically, one of the two is installed.
It is not dependent on the legacy &lt;code&gt;cbc_crypt()&lt;/code&gt; function that formerly was in &lt;code&gt;libc&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;generating-passphrases&#34;&gt;
    &lt;a href=&#34;#generating-passphrases&#34;&gt;
	Generating passphrases
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Encrypting and decrypting BGP passwords requires a passphrase. In EOS,
this passphrase is not static, but depends on the neighbor where the
BGP password is configured.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;router bgp 65001
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   router-id 10.1.1.1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   neighbor mydevices peer-group
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   neighbor mydevices password 7 8kjYaye5DsQh0epELyKNe0oZ3E3zp39X
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The passphrase is generated by taking the string after &lt;code&gt;neighbor&lt;/code&gt; (in this
example &lt;code&gt;mydevices&lt;/code&gt;), and appending the string &lt;code&gt;_passwd&lt;/code&gt; to it. The string
can be the name of a peer group, an IPv4 address or an IPv6 address, and
has to be used as shown in the device configuration output. This is particularly
important for IPv6 addresses which have multiple forms of representation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Whatabotism</title>
      <link>https://blog.koehntopp.info/2018/12/19/whatabotism.html</link>
      <pubDate>Wed, 19 Dec 2018 17:06:42 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2018/12/19/whatabotism.html</guid>
      <description>&lt;p&gt;Basierend auf einem &lt;a href=&#34;https://twitter.com/isotopp/status/1075020503079886848&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Thread in Twitter&lt;/a&gt;

 und &lt;a href=&#34;https://twitter.com/isotopp/status/1075394005502976001&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;noch einem Thread&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Im November 2012 kam Ingress von Niantic heraus.
Das ist ein server-basierendes Augmented Reality Game mit GPS-Koordinaten, bei dem man bestimmte Orte aufsuchen muss, um dort Dinge auf dem Mobiltelefon zu tun.
Im Februar 2013 hatte ich es durchgespielt und begann das Spiel zu automatisieren.
Ich schrieb Bots.&lt;/p&gt;
&lt;p&gt;Das taten viele, denn das Spiel wurde von Niantic mehr oder weniger an die gesamte Android Developer Community geseeded.
Niantic hat dann versucht, Bots zu erkennen und Sicherheitsmaßnahmen in das Spiel einzubauen, die Botting schwieriger machen sollten.
Ich habe später eine Reihe von Artikel auf Google+ zu diesem Thema geschrieben.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/12/whatabotism.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Aber Bots zu erkennen und dann zu bannen ist schwierig.
Viel schwieriger als gedacht.
Von meinen 1000 Bot-Instanzen wurden am Ende keine gebannt, aber große Teile der Berliner Ingress Community und der Ingress Community in anderen deutschen Städten wurden als false positives erkannt.&lt;/p&gt;
&lt;h1 id=&#34;menschen-simulieren&#34;&gt;
    &lt;a href=&#34;#menschen-simulieren&#34;&gt;
	Menschen simulieren
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Wie macht man schwer zu erkennende Bots?&lt;/p&gt;
&lt;p&gt;In Ingress soll man &amp;ndash; ohne Cheaten &amp;ndash; in der realen Welt herumlaufen und in der Nähe von bestimmten Markierungspunkten Aktionen ausführen.
Meist, um effektiv zu sein, als Gruppe.&lt;/p&gt;
&lt;p&gt;Also hatten meine Bots ein soziales Netz, mit anderen Bots, die bevorzugt (aber nicht immer) zusammen gespielt haben.&lt;/p&gt;
&lt;p&gt;Sie hatten keine festen, wiedererkennbaren Routen, sondern Urges:
Rufe die Google Wetter API auf.
Schlechtes Wetter?
Füge eine Starbucks-Pause in die Route ein.&lt;/p&gt;
&lt;p&gt;Habe Schlafenszeiten, Arbeitszeiten, wähle Spielzeiten entsprechend.
Plane Routen zwischen Ingress Portalen mit der Google Maps API und Fahrrad als Verkehrsmittel, warte die angegebenen Reisezeiten zwischen Aktionen an unterschiiedlichen Zielkoordinaten.&lt;/p&gt;
&lt;p&gt;Mache niemals etwas mit maschineller Präzision.
Jittere Zeiten, Koordinatenangaben, Reaktionszeiten und auch sonst alles.&lt;/p&gt;
&lt;p&gt;Und dann steuere auf dieser simulierten realweltlichen Person das Spielverhalten, wieder mit Urges, die auf dem In-Game Inventory und Spielstrategien baiseren.
&amp;ldquo;Verabrede&amp;rdquo; Dich mit anderen Bots und agiere gemeinsam (oder auch nicht).&lt;/p&gt;
&lt;p&gt;Und wenn reale Spieler irgendwo aktiv sind, dann verlagere die Aktivitäten woanders hin.&lt;/p&gt;
&lt;p&gt;Das alles erzeugt ein Verhalten, das so normal ist, daß echte Personen öfter gebannt werden als diese Bots.&lt;/p&gt;
&lt;p&gt;Niantic war für eine gewisse Zeit lang stark interessiert, Bots zu erschweren oder unmöglich zu machen.
Ein verhaltensbasierter Ansatz hat aber nirgendwohin geführt:
Die Variation in menschlichem Verhalten ist so groß, daß man mit einer recht simplen Simulation wie oben beschrieben ein Botverhalten hin bekommt, das nicht signifikant aus der Masse der menschlichen Benutzer heraus sticht.&lt;/p&gt;
&lt;p&gt;Am Ende war es langweilig:
Das Ziel für mich war Node.js und Javascript zu lernen.
Dieses Missionsziel wurde erreicht.
Zugleich hat sich die API des Spiels und das Spiel selbst so oft geändert, daß ich es hätte professionalisieren müssen, um mitzuhalten.
Daran bestand aber nie Interesse, also habe ich es aufgegeben &amp;ndash; zweimal durchgespielt (einmal in echt und einmal automatisiert) war genug.&lt;/p&gt;
&lt;p&gt;Also habe ich die &lt;a href=&#34;https://docs.google.com/document/d/1A252cvmjl86n9uZ0tyi2X4ZabxLE4ribJIEBbC8FifQ/edit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Erkenntnisse in einem Google Dokument&lt;/a&gt;

 aufgeschrieben und publiziert und danach andere Dinge getan.&lt;/p&gt;
&lt;h1 id=&#34;bot-oder-mensch&#34;&gt;
    &lt;a href=&#34;#bot-oder-mensch&#34;&gt;
	Bot oder Mensch?
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Da ist eine Lehre drin für Leute, die Twitter-Bots oder andere Social Bots erkennen wollen.&lt;/p&gt;
&lt;p&gt;Twitter ist nicht Ingress, und Diskussionen sind komplizierter als Burster zu werfen.&lt;/p&gt;
&lt;p&gt;Aber &amp;ldquo;Markierungspflicht&amp;rdquo; oder &amp;ldquo;statistische Bot-Erkennung&amp;rdquo; sind beides Blödsinn, auf mehr als eine Weise.&lt;/p&gt;
&lt;p&gt;Du kannst eine privilegierte API haben, die von der offziellen Twitter App genutzt wird,
und eine zweite API für maschinelle Interaktion auf Twitter.
Aber natürlich hindert das niemanden daran, die Menschen-API aus dem offiziellen Twitter Binary zu reversen und dann automaitissert zu vverwenden.
Oder den offiziellen Client zu scripten.&lt;/p&gt;
&lt;p&gt;Und natürlich ist es am Ende egal, was den Effekt auf soziale Interaktion angeht, ob ein Troll ein Bot oder ein schlecht bezahlter Mindestlöhner in einem Schwellenland ist.&lt;/p&gt;
&lt;h1 id=&#34;automat-bot-und-trollarmee&#34;&gt;
    &lt;a href=&#34;#automat-bot-und-trollarmee&#34;&gt;
	Automat, Bot und Trollarmee
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Man kann das dennoch für die vereinfachte Diskussion differenzieren:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ein automatisierter Account ist ein Account, der von einer Maschine mit Inhalten befüttert wird.
Das kann so etwas simples wie ein Retweetbot sein, oder ein Bot, der die aktuelle Uhrzeit twittert,
oder halt mein Friendsplus.me-Account, der mein Google+ nach Twitter geschoben hat.&lt;/p&gt;
&lt;p&gt;Ein automatisierter Account hat aber keine algorithmische Reaktionslogik in irgendeiner Form.
Er generiert oder sucht Content und pushed den dann. Ein Feed.&lt;/p&gt;
&lt;p&gt;Nichts hält einen Accountbesitzer davon ab, den Feedbetrieb des automatischen Accounts mit manuellen Tweets zu mischen.
Viele Promis mit gemanagten Twitter-Accounts tun das.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ein Bot ist ein automatisierter Account, der reaktiv Tweets sucht oder liest, und dann algorithmisch eine Reaktion generiert.
Oft (aber nicht zwingend) mit dem Ziel als reale Person gesehen zu werden.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trolle sind genau keine automatisierten Accounts, sondern manuelle Benutzer, die roboterhaft auf Reize aus Twitter oder anderen sozialen Medien reagieren.
Sie werden oft wie Bots geführt. Die ganze Sendung &lt;a href=&#34;https://www.youtube.com/watch?v=fAYjSLtz6wQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Neo Magazin Royale: Hass im Internet&lt;/a&gt;

 beschäftigt sich damit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Und das ist genau der Punkt.
Die politische Diskussion beschäftigt sich mit den äußeren Merkmalen (&amp;ldquo;Syntax&amp;rdquo;), aber eigentlich geht es darum, was passiert:
organisierte und verdeckte Beeinflussung eines öffentlichen Diskurses - &amp;ldquo;Semantik&amp;rdquo;.
Die Mittel sind im Grunde Wurst.&lt;/p&gt;
&lt;p&gt;Nun muß die organisierte Beeinflussung eines öffentlichen Diskurses nicht falsch sein.
Ich habe das in der Vergangenheit oft getan.
Um 2000 habe ich de.comp.lang.php manipuliert, 2003 habe ich Heise Foren manipuliert, wann immer web.de erwäht wurde,
und zusammen mit Freunden haben wir die USENET-Gruppen de.talk.bizarre und de.soc.rollenspiele.misc mit unterschiedlichen Absichten offen oder verdeckt geführt.&lt;/p&gt;
&lt;p&gt;Der Talk &lt;a href=&#34;https://www.slideshare.net/isotopp/flames-kommunikationszusammenbrche-im-netz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flames im Internet (CCCS 2007, Froscon 2014)&lt;/a&gt;


(&lt;a href=&#34;https://www.youtube.com/watch?v=FXD3vk9M7SQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Video&lt;/a&gt;

) dokumentiert das.&lt;/p&gt;
&lt;p&gt;Der Punkt ist mehr, daß verdeckte Beeinflussung des politischen Diskurses ein Problem ist.
Aber das kann man in Deutschland im politischen Diskurs so nicht sagen.
Denn dann hat Deutschland mehr als ein Problem.
Also nicht nur Russen-Nichtbots und die Reconquita Germanica, sondern auch falsche oder fehlende Gesetze zur Regulierung der Bestechlichkeit von Abgeordneten oder Lobbyismuskontrolle.&lt;/p&gt;
&lt;p&gt;Und das kann ja nun wirklich keiner wollen.
Es kommt also in Wahrheit darauf an, daß die richtigen Interessengruppen den politischen Diskurs verdeckt beeinflussen können.
Nur so kommen wir weiter!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Websense DLP gives instant root</title>
      <link>https://blog.koehntopp.info/2018/06/18/websense-dlp-gives-instant-root.html</link>
      <pubDate>Mon, 18 Jun 2018 20:33:10 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2018/06/18/websense-dlp-gives-instant-root.html</guid>
      <description>&lt;p&gt;Enterprise security software is interesting, because in order to do what it does it often uses privilege, but it is also very often written extremely badly.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://blog.koehntopp.info/2017/10/20/aslr.html&#34;&gt;ASLR&lt;/a&gt;

 we have had a look on the Trend Micro binary on MacOS and found that it is running as root, and with ASLR off. That means we have a privileged process that is being loaded at a fixed address, and that process is parsing random user generated data in order to scan it for viruses. If we manage to find a bug in that code, we have a way to make this privileged process do our bidding – by simply putting a special file into a directory that is being scanned by the virus scanner.&lt;/p&gt;
&lt;p&gt;Because ASLR is off, that antivirus process is at the same, fixed address on every machine running the same OS version and Trendmicro version. This means: our bug works the same way on every single machine with these properties. We basically control the entire fleet of machines at once.&lt;/p&gt;
&lt;p&gt;Such thoughts are not hypothetical problems. Let&amp;rsquo;s have a look at another enterprise security product and how that works, for real.&lt;/p&gt;
&lt;h2 id=&#34;websense-dlp-is-installed-and-it-is-python&#34;&gt;
    &lt;a href=&#34;#websense-dlp-is-installed-and-it-is-python&#34;&gt;
	Websense DLP is installed and it is Python
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;So yesterday morning when I came to work, my Macbook Air had crashed.&lt;/p&gt;
&lt;p&gt;On Reboot, the jamf installed a bunch of patches and new stuff. I ran the usual fast &lt;a href=&#34;https://aide.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AIDE&lt;/a&gt;

 check I do every morning, and found a bunch of modified system files, among them WebSense DLP as announced by Corporate a while ago.&lt;/p&gt;
&lt;p&gt;I found a bunch of files in &lt;code&gt;/Library/Application Support/Websense Endpoint&lt;/code&gt; and was immediately fascinated, because apparently this installs a complete version of Python 2.5.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; find . -iname python2&lt;span class=&#34;se&#34;&gt;\*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;./EPClassifier/python/bin/python2.5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; EPClassifier/python/bin/python2.5
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Python 2.6.9 (unknown, Feb  7 2017, 00:08:08)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, so they lie about that. It’s 2.6.&lt;/p&gt;
&lt;p&gt;On the other hand, they deliver their application as a bunch of &lt;code&gt;.pyc&lt;/code&gt; (compiled python bytecode) files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; find  . -iname &lt;span class=&#34;se&#34;&gt;\*&lt;/span&gt;.pyc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;./EPClassifier/CryptoInterface.pyc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;./EPClassifier/policies/file_detectors/ASMDetector.pyc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;./EPClassifier/policies/file_detectors/CAD_STL.pyc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can read that, using &lt;a href=&#34;https://github.com/rocky/python-uncompyle6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;uncompyle6&lt;/a&gt;

: &lt;code&gt;brew install python3; pip3 install uncompyle6&lt;/code&gt;, because I am lazy and don’t want to mess with a venv right here and now.&lt;/p&gt;
&lt;p&gt;I’d want that in my path all the time anyway.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uncompyle6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;./&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EPClassifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scripts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pyLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pyc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# uncompyle6 version 3.2.3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Python bytecode 2.5 (62131)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Decompiled from: Python 3.7.0 (default, Jul  9 2018, 09:48:45)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# [Clang 9.0.0 (clang-900.0.39.2)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Embedded file name: .\pyLogger.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;codecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;threading&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PyLogger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debugName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;C:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;pyLogger_svm_default_log_file.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debugName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debugName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myMutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;massage_to_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;time_str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strftime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; %H-%M-%S&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;localtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;string_to_write&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; pyLogger debug message: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;massage_to_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myMutex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;acquire&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;log_debug_file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;codecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;log_debug_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string_to_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;log_debug_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\r\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;log_debug_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myMutex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# okay decompiling ./EPClassifier/policies/scripts/pyLogger.pyc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;its-all-world-writeable-or-is-it&#34;&gt;
    &lt;a href=&#34;#its-all-world-writeable-or-is-it&#34;&gt;
	It&amp;rsquo;s all world-writeable, or is it?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;That’s fun, I thought and then I saw the file permissions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ls -l ./EPClassifier/policies/scripts/pyLogger.pyc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;-rw-rw-rw-  1 root  admin  1130 Nov 14  2017 ./EPClassifier/policies/scripts/pyLogger.pyc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Is it really a good idea to have system security software installed with world-writeable files?&lt;/p&gt;
&lt;p&gt;I asked in our internal security forum, and apparently WebSense has an anti-tampering protection.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; kextstat &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v com.apple &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ print $1, $6 }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Index Name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;15 com.displaylink.driver.DisplayLinkDriver
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;91 com.asix.driver.ax88179-178a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;131 com.Cylance.CyProtectDrvOSX
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;146 com.websense.endpoint.process.kpi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;147 com.websense.endpoint.process
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;148 com.websense.endpoint.dlp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The number 148, &lt;code&gt;com.websense.endpoint.dlp&lt;/code&gt;, is the kernel module that &amp;ldquo;protects&amp;rdquo; these files: As a user or as root, when you try to modify one of the world writeable files, the module intercepts and blocks the call.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;com.websense.endpoint.dlp: [WARNING:ws_anti.c:364] Blocking the attempt to modify or delete /Library/Application Support/Websense Endpoint/EPClassifier/python/lib/python2.5/sqlite3/__init__.py, pid:73968, process:vim, action: 0x4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Challenge accepted.&lt;/p&gt;
&lt;h2 id=&#34;a-kext-is-just-code-lets-have-a-look&#34;&gt;
    &lt;a href=&#34;#a-kext-is-just-code-lets-have-a-look&#34;&gt;
	A kext is just code. Let&amp;rsquo;s have a look.
    &lt;/a&gt;
&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;.../Websense Endpoint/DLP/WebsenseEndpointDLP.kext/Contents/MacOS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ls -l
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;total 440
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;-rwxr-xr-x  1 kris  staff  223056 Jun  4 23:52 WebsenseEndpointDLP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s the kext, the one which registers itself as &lt;code&gt;com.websense.endpoint.dlp&lt;/code&gt; in &lt;code&gt;kextstat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can load it into &lt;a href=&#34;https://www.hopperapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hopper&lt;/a&gt;

. Hopper is a $99 IDAPro Clone with a nice Python API. You can also use the free version of IDApro, or the NSA Ghidra to achieve the same.&lt;/p&gt;
&lt;p&gt;Turns out, the kext is delivered with a full symbol table. Here is what you see when you start Hopper, drag the kext into it and click on the symbol that inits the kernel extension:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-01.jpg&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-01.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Initial glance at the kext after loading. We have symbols. That&amp;rsquo;s almost like cheating.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is a tempting call to &lt;code&gt;_ws_anti_tampering_initialize()&lt;/code&gt;, but I have learned to do things differently a long time ago. The error message read &amp;ldquo;Blocking the attempt to modify or delete&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-02.jpg&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-02.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Two places in vnode_listener_callback_9135&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We are looking at a vnode listener, which is a type of &lt;a href=&#34;https://www.apriorit.com/dev-blog/411-mac-os-x-kauth-listeners&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kauth&lt;/a&gt;

 listener, which is a MacOS thing to monitor or block access to files. It’s what all the Cybersnakeoil is using. It’s also what’s making your &lt;code&gt;git checkout&lt;/code&gt; slow.&lt;/p&gt;
&lt;p&gt;And here is the callback:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-03.jpg&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-03.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read the highlighted code&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is little going on here until we hit the highlighted code. You can’t see all of it, but that does not matter.&lt;/p&gt;
&lt;p&gt;The code calls &lt;a href=&#34;https://developer.apple.com/documentation/kernel/1488959-proc_name?language=objc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proc_name()&lt;/a&gt;

, which gets the current process title in the kernel context. It then compares this name to a list of approved process names.&lt;/p&gt;
&lt;p&gt;If there is a match, no blockage happens from the kext.&lt;/p&gt;
&lt;p&gt;So, anything called&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EndPointClassifier&lt;/li&gt;
&lt;li&gt;kvoop&lt;/li&gt;
&lt;li&gt;CryptoTool&lt;/li&gt;
&lt;li&gt;InstallerTools&lt;/li&gt;
&lt;li&gt;Websense Endpoint&lt;/li&gt;
&lt;li&gt;TRITON AP-ENDPOINT&lt;/li&gt;
&lt;li&gt;Websense Endpoint Helper&lt;/li&gt;
&lt;li&gt;DLPHelperService&lt;/li&gt;
&lt;li&gt;efw_cache_update&lt;/li&gt;
&lt;li&gt;installd&lt;/li&gt;
&lt;li&gt;installer&lt;/li&gt;
&lt;li&gt;rc.deferred_install&lt;/li&gt;
&lt;li&gt;shove&lt;/li&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;li&gt;Websense Endpoint RF Notification&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;is approved to bypass the protection afforded by kext 148.&lt;/p&gt;
&lt;p&gt;That makes a lot of sense, if you look at it - how are they going to update their code out in the world? Some programs must be allowed to write to it – that&amp;rsquo;s how &lt;code&gt;InstallerTools&lt;/code&gt;, &lt;code&gt;CryptoTool&lt;/code&gt;, &lt;code&gt;installd&lt;/code&gt;, &lt;code&gt;installer&lt;/code&gt; and &lt;code&gt;rc.deferred_install&lt;/code&gt; as well as &lt;code&gt;shove&lt;/code&gt; end up on this list.&lt;/p&gt;
&lt;p&gt;The others are likely convenience for Develoeprs that &amp;ldquo;accidentally&amp;rdquo; (through bad development processes) made it out into production code. It&amp;rsquo;s likely that the bad permissions also ended up being shipped the same way – it makes a lot of sense for a developer to have these files world-writeable all the time when they are developing this product.&lt;/p&gt;
&lt;p&gt;In any case, other rules in the rest of the kernel still apply, so file permissions still work. But WebSense delivered a bunch of files world-writeable, relying on their kext to protect their application.&lt;/p&gt;
&lt;p&gt;They do load these world-writeable files into their python process, which runs as root, and happily execute them. So this is our hook: We overwrite any of these files with our own code, using our own program which we name &lt;code&gt;kvoop&lt;/code&gt; (or anything from the list above), and then restart the machine. As it starts up, it loads our code and the box is ours.&lt;/p&gt;
&lt;p&gt;We get privilege escalation from local user to system administrator.&lt;/p&gt;
&lt;h2 id=&#34;we-write-a-proof-of-concept&#34;&gt;
    &lt;a href=&#34;#we-write-a-proof-of-concept&#34;&gt;
	We write a proof-of-concept
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Can I prove that I can circumvent their protection?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;probe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;version.plist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Can&amp;#39;t fopen&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, world&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a slight variation of the “hello world” program: It opens a file version.plist, writes &amp;ldquo;Hello, world&amp;rdquo; to the file, sleeps a minute and exits.&lt;/p&gt;
&lt;p&gt;First, expected behavior: Boy meets file, file is world writeable, boy tries to write file, and fails due to the kext doing the kauth thing and interfering.&lt;/p&gt;
&lt;p&gt;Hackerterrorcybercyber averted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;/Library/Application Support/Websense Endpoint/EPClassifier/python/Resources
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ls -l version.plist 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;-rwxrwxrwx 1 root admin 454 May 26 07:13 version.plist
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; &amp;gt; version.plist
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;-bash: version.plist: Permission denied
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Boy reverses the kext, reads the list of privileged filenames, names his &amp;ldquo;hello world&amp;rdquo; program kvoop from the list of privileged filenames and lo and behold:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; kvoop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;^C
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; cat version.plist
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Hello, world
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I pwn.&lt;/p&gt;
&lt;h2 id=&#34;other-observations&#34;&gt;
    &lt;a href=&#34;#other-observations&#34;&gt;
	Other observations
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Websense DLP is one of the kind of products that inject a shared library (a Macos &lt;code&gt;.dylib&lt;/code&gt;) into other processes. In our case, Chrome and Firefox are being targeted. This is not a stable interface, and &lt;a href=&#34;https://www.techradar.com/news/google-chrome-keeps-crashing-it-might-be-your-antivirus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome or Firefox may crash&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Websense DLP relies on the &lt;code&gt;prog_name()&lt;/code&gt; not only for exceptions in the kauth handler, but also in the selection of binaries to target for injection. For example, if I write a &amp;ldquo;hello world&amp;rdquo; program and rename it to &lt;code&gt;firefox&lt;/code&gt;, there is a lot of commotion in the system log: Websense DLP tries to inject its libraries into my &amp;ldquo;hello world&amp;rdquo; program, which it mistakes for Firefox due to the program name, and fails, noisly.&lt;/p&gt;
&lt;p&gt;The same works in reverse: A firefox binary that is not named &lt;code&gt;firefox&lt;/code&gt; is not recognized and does not get the shared library injected, so it flies under the radar.&lt;/p&gt;
&lt;p&gt;One wonders what the actual threat model is that this is supposed to protect against.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;
    &lt;a href=&#34;#tldr&#34;&gt;
	TL;DR
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We deployed Websense DLP across all company Macs, and anybody renaming their &lt;code&gt;vim&lt;/code&gt; to &lt;code&gt;kvoop&lt;/code&gt; can edit the files, which are then loaded into a privileged process and run as root.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Websense DLP is an instant root on all Mac machines where it is being deployed.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Addendum:&lt;/em&gt; Security picked up on this, and communicated the problem to the vendor, which then shipped a fix. It is unknown to me if they also fixed their broken security processes. We ceased using the product shortly after that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sending letters the CIA way</title>
      <link>https://blog.koehntopp.info/2017/01/25/sending-letters-the-cia-way.html</link>
      <pubDate>Wed, 25 Jan 2017 08:16:22 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2017/01/25/sending-letters-the-cia-way.html</guid>
      <description>&lt;p&gt;Palaeofuture has an
&lt;a href=&#34;http://paleofuture.gizmodo.com/how-to-securely-send-snail-mail-the-cia-way-1791501535&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;interesting article&lt;/a&gt;


on sending letters, the CIA way.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/01/pk8eyjrzhtc0svosziuo.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you file a Freedom of Information Act (FOIA) request with a federal
agency, they’ll often send you physical letters in the mail. When I got my
first response letter from the CIA, I was a little surprised to see some
old-fashioned, anti-spy tech on the back of the envelope. As you can see
from the photos above and below, there’s no way to open the envelope
without making it clear you’ve been messing with it.&lt;/p&gt;
&lt;p&gt;The author has been inquiring about the how and why, and despite the
inquiry not being a formal FOIA request got an answer.&lt;/p&gt;
&lt;p&gt;The “gummed kraft sealing tape” the agency uses is three inches wide, and
the indications from the response to my FOIA request suggest that the
agency buys it in 450-foot rolls.&lt;/p&gt;
&lt;p&gt;The article does have a part and an order number for the tape, in case you
have need for it.&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Backdoor</title>
      <link>https://blog.koehntopp.info/2012/05/28/backdoor.html</link>
      <pubDate>Mon, 28 May 2012 10:37:16 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2012/05/28/backdoor.html</guid>
      <description>&lt;p&gt;Sergei Skorobogatov von der Uni Cambridge kündigt sein neues Paper an, das
jedoch erst im September veröffentlicht werden wird (&lt;a href=&#34;https://www.cl.cam.ac.uk/~sps32/ches2012-backdoor.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF&lt;/a&gt;

):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Breakthrough silicon scanning discovers backdoor in military chip&amp;rdquo; will
appear at CHES2012 in September.  It will expose some serious security
issues in the devices which are supposed to be unbreakable.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Es geht um Krypto, die in Hardware implementiert ist, und man hat Chips
untersucht, die in aktueller militärischer Hardware eingesetzt werden, indem
man Reverse Engineering-Techniken auf diese Hardware angewendet hat und das
so gewonnenene Design gegen die Spezifikation verglichen hat.  Die anderen
Artikel auf der Seite legen nahe, daß es sich um ein
&lt;a href=&#34;http://de.wikipedia.org/wiki/Field_Programmable_Gate_Array&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FPGA&lt;/a&gt;


handelt, bei dem man festgestellt hat, daß es neben dem durch den legitimen
Benutzer verwendeten Key auch noch einen zweiten festen Key besitzt, der
verwendet werden kann, den Chip aufzuschließen oder herunterzufahren, auch
wenn er durch den legitimen Benutzerschlüssel versiegelt worden ist.&lt;/p&gt;
&lt;p&gt;Die weitere Berichterstattung legt nahe, daß das Teil in so ziemlich jeder
militärischen Hardware und kritischen Infrastruktur verbaut worden ist, die
sich finden läßt und daß man jetzt erst mal am Schwitzen ist, weil man
dieser Hardware (und auch aller anderen importierten Hardware) so gar nicht
mehr trauen mag.  Andererseits sind die USA etwa durch die
&lt;a href=&#34;http://www.zeit.de/2011/12/USA-Deindustrialisierung&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deindustriealisierung&lt;/a&gt;


zum Teil gar nicht mehr in der Lage, alle für solche Systeme notwendigen
Komponenten selbst zu fertigen - eine unangenehme Situation, wenn man Kriege
führen möchte.&lt;/p&gt;
&lt;p&gt;Die gefundene Backdoor erscheint mir jedoch ziemlich primitiv und wenig
entwickelt, und sie wirft für den Hersteller der Hardware oder - falls
verantwortlich - seine Regierung ebenso viele Probleme auf wie für die
betroffenen.&lt;/p&gt;
&lt;p&gt;Es ist ja klar, daß man als Hersteller von solcher Hardware in den
Exportversionen seiner Milspec Hardware irgendwelche Kontrollmöglichkeiten
haben möchte, falls das Zeugs einmal gegen einen selbst gerichtet wird.
Aber nicht nur will man, daß die Backdoor schwer entdeckbar bleibt, solange
sie nicht verwendet wird.  Sondern eigentlich möchte man, daß sie selbst
dann glaubwürdig geleugnet werden kann, wenn sie eingesetzt worden ist und
der Einsatz danach bekannt wird
(&lt;a href=&#34;http://en.wikipedia.org/wiki/Plausible_deniability&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;plausible denial&lt;/a&gt;

).
Die ideale Backdoor sieht also aus wie ein Programmierfehler (&amp;ldquo;Bugdoor&amp;rdquo;)
oder ein dummes Versehen - ein vergessener Permission-Check, verdrehte
Parameter oder vertauschte Logik.&lt;/p&gt;
&lt;p&gt;Der zweite Code im FPGA erfüllt diese Bedingung nicht.  Er wäre lediglich
mit demselben Argument zu &amp;lsquo;rechtfertigen&amp;rsquo;, mit dem auch
Default-Systempaßworte oder einheitliche Wartungszugänge in DSL-Router und
andere Hardware eingebaut wird (&amp;lsquo;Unser Kundendienst muß in der Lage sein,
wieder an ihre Daten zu kommen, wenn Sie die Hardware zerkonfiguriert
haben.&amp;rsquo;) Wir reden hier allerdings von Milspec-Hardware, da hat man dieses
Verlangen offiziell eher nicht.&lt;/p&gt;
&lt;p&gt;Es ist auch ein Risiko, daß eine solche Hintertür durch Dritte entdeckt und
kompromittiert wird.  Es ist blöd, wenn die Nutzung dieser Hintertür auf
allen betroffenen Systemen einfach und auf dieselbe Weise möglich ist.  Am
Besten wäre es, wenn die Funktion der Hintertür an eine Variable gekoppelt
ist, die instanz-spezifisch ist, aber dennoch von außen erratbar wäre.&lt;/p&gt;
&lt;p&gt;Die oben erwähnten FPGA haben diese Eigenschaft nicht - es scheint mir nach
dem Lesen der wenigen gesicherten Informationen so zu sein, als könne man
alle Instanzen dieses Chips mit demselben festen Zweitschlüssel öffnen.
Damit hat man für sich und seinen Gegner ein riesiges Managementproblem
geschaffen, weil nun dessen Infrastruktur durch jeden Dritten und seinen
Hund angreifbar ist - es ist ja ausreichend, daß man jetzt weiß, daß es so
eine Hintertür gibt.  Sich dann den Schlüssel selber zu beschaffen ist eine
Aufgabe mit überschaubaren Kosten und Aufwand für einen
&lt;a href=&#34;http://en.wikipedia.org/wiki/Advanced_persistent_threat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;APT&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Alles in allem ist &lt;em&gt;das&lt;/em&gt; keine gute Hintertür, weil sie alleine schon
durch diesen einen vagen Artikel umfassend kompromittiert worden ist und zu
einem unkalkulierbaren Risiko für den Angreifer und den Verteidiger wird,
weil sie nun jede Menge dritte Spieler aktiviert.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Was ist eigentlich Firewire DMA?</title>
      <link>https://blog.koehntopp.info/2011/07/27/was-ist-eigentlich-firewire-dma.html</link>
      <pubDate>Wed, 27 Jul 2011 15:32:03 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2011/07/27/was-ist-eigentlich-firewire-dma.html</guid>
      <description>&lt;p&gt;Der Spiegel entdeckt:
&lt;a href=&#34;http://www.spiegel.de/netzwelt/gadgets/0,1518,776971,00.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Verräterische Firewire-Verbindung: Kauf-Software knackt Mac-Passwörter&lt;/a&gt;

.
In dem Artikel geht es um die Entdeckung, daß Firewire ein Busprotokoll ist,
das DMA erlaubt.&lt;/p&gt;
&lt;p&gt;DMA ist ein Kürzel, das für
&lt;a href=&#34;http://en.wikipedia.org/wiki/Direct_memory_access&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Direct Memory Access&lt;/a&gt;


steht. Normalerweise ist Computerperipherie über die CPU an den Rechner
angebunden: Wenn eine Eingabe oder eine Ausgabe zu machen ist, dann
schaufelt einer der Kerne des Rechners ein Byte aus einem speziellen
I/O-Register oder einer magischen Speicheradresse, die statt mit einem
RAM-Baustein mit einem I/O-Baustein verbunden ist, in die CPU und von der
CPU dann an die Zieladresse - die wiederum entweder eine normale
Speicheradresse oder wiederum eine magische Ein-/Ausgabeleitung ist.&lt;/p&gt;
&lt;p&gt;Moderne CPUs haben eine Einbaukomponente, die
&lt;a href=&#34;http://en.wikipedia.org/wiki/Memory_Management_Unit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Memory Management Unit&lt;/a&gt;

.
Das war früher mal ein extra Baustein, ist aber vor 20 Jahren oder so mit in
die CPU integriert worden. Die MMU hat die Aufgabe, die Speicher- und
I/O-Zugriffe eines jeden Prozesses zu kontrollieren und zu verhindern, daß
ein Benutzerprozeß auf privilegierten Speicher zugreift oder auf Speicher
anderer Prozesse. Die MMU implementiert also die Sicherheit in modernen
Betriebssystemen.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/io-mit-cpu.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Jeder Speicher- und I/O-Zugriff wird von der MMU überwacht.&lt;/p&gt;
&lt;p&gt;Wie man sich aus der Beschreibung von DMA leicht überlegen kann, umgeht DMA
die MMU komplett: Das I/O-Gerät wird nicht von der CPU abgefragt, sondern es
meldet sich auf denselben Adreßleitungen (dem &amp;ldquo;Bus&amp;rdquo;), auf dem auch die CPU
liegt an und greift dann selber wie eine zweite CPU auf diesen Bus und alle
darauf liegenden Geräte zu - also auch auf allen Speicher. Da es selber wie
eine CPU agiert, umgeht es die eigentliche CPU des Systems und damit auch
die darin liegende MMU.&lt;/p&gt;
&lt;p&gt;Firewire ist ein Bus, der DMA-Geräte erlaubt. Darum ist er lange Zeit
schneller als USB gewesen und Firewire-Geräte haben außerdem das System
weniger ausgebremst als USB-Geräte: Die Firewire-Devices mußten sich halt
nicht von der CPU byteweise die Daten füttern lassen, sondern haben
stattdessen parallel zur CPU ihre Daten ins System gebulldozert.&lt;/p&gt;
&lt;p&gt;Wenn man also am Firewire-Port von Rechner a keine normale Festplatte
anschließt, sondern etwa einen zweiten Rechner b, dann kann dessen CPU ein
beliebiges Programm auf Rechner b ausführen, das auf beliebige Bytes von
Rechner a lesend oder schreibend zugreift.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/io-mit-dma.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;DMA ist ein Mechanismus, der anderen Geräten an CPU und MMU vorbei
Speicherzugriff erlaubt. Dadurch sind alle Speicherinhalte dem externen
Gerät ungeschützt zugänglich.&lt;/p&gt;
&lt;p&gt;Ist das überraschend? Nein.&lt;/p&gt;
&lt;p&gt;Ist das neu? Nein. Software dafür ist seit 2003 als Open Source zu bekommen.&lt;/p&gt;
&lt;p&gt;Ist die Empfehlung aus dem Spiegel-Artikel sinnvoll?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Allerdings, merkt Passware selbst an, kann man dem Passwortklau mit zwei
simplen Maßnahmen einen Riegel vorschieben. Zum einen sollte man die
Funktion &amp;ldquo;Automatische Anmeldung&amp;rdquo; im &amp;ldquo;Kontrollfeld Benutzer &amp;amp; Gruppen&amp;rdquo;
deaktivieren. Zum anderen sollte man den Computer in Pausen komplett
abschalten, statt ihn nur in den Ruhezustand zu versetzen. Dann haben auch
gut ausgerüstete Passwortdiebe keine Chance mehr.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Geht so. Zwar ist es sinnvoll, die automatische Anmeldung zu deaktivieren,
um die Systemsicherheit zu erhöhen (alternativ den Bildschirmschoner mit
einem Paßwort zu versehen) und auch den Rechner abzuschalten statt suspend
zu verwenden.&lt;/p&gt;
&lt;p&gt;Aber solange der Rechner läuft ist nicht der Klau des Paßwortes die
eigentliche Gefahr. Sondern die Tatsache, daß einem ein wildgewordenen
Firewire Device, das man anschließt, jedes beliebige Byte auslesen oder
übermalen kann. Mit Paßworten muß sich da keiner aufhalten, wenn man das
ganze System ersetzen oder verändern kann.&lt;/p&gt;
&lt;p&gt;Siehe auch &lt;a href=&#34;http://blog.fefe.de/?ts=b32cb04e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hier&lt;/a&gt;

 für andere Zugriffe mit DMA.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wenn man Sony ist, hat man es nicht leicht</title>
      <link>https://blog.koehntopp.info/2011/04/27/wenn-man-sony-ist-hat-man-es-nicht-leicht.html</link>
      <pubDate>Wed, 27 Apr 2011 12:06:55 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2011/04/27/wenn-man-sony-ist-hat-man-es-nicht-leicht.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/sonyelectronics.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Ich glaube, von allen Teilen der Musik- und Unterhaltungsindustrie ist die
Marke &amp;ldquo;Sony&amp;rdquo; mit allen ihren Armen und Seitengeschäften noch vor &amp;ldquo;Disney&amp;rdquo;
eine der Firmen, die das Image von &amp;ldquo;Das ist der Feind&amp;rdquo; am Besten verkörpern.&lt;/p&gt;
&lt;p&gt;Die tatsächliche Sachlage ist kompliziert, aber das Image ist grundlegend
verbrannt und erholt sich irgendwie auch nicht.&lt;/p&gt;
&lt;p&gt;Ein Teil von Sony hatte
&lt;a href=&#34;http://en.wikipedia.org/wiki/Sony_BMG_copy_protection_rootkit_scandal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in 2005 Rootkits auf den Rechnern ihrer Kunden installiert&lt;/a&gt;

.
Seither geht es Schlag auf Schlag, damit das Image des Namens gleichmäßig
bleibt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.golem.de/0804/59229.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2008 - Connect Online DRM-Server Abschaltung und Kunden-im-Regen-stehen-lassen&lt;/a&gt;

.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/OtherOS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2010 - Retroaktives canceln der Linux-Installationsoption für PS/3&lt;/a&gt;

,&lt;/li&gt;
&lt;li&gt;die Hatz gegen &lt;a href=&#34;http://www.heise.de/newsticker/meldung/Sony-vs-PS3-Hacker-Hotz-Sony-erhaelt-IP-Adressen-von-Webseitenbesuchern-1202809.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geohot und potentiellen Helfern&lt;/a&gt;

,&lt;/li&gt;
&lt;li&gt;und jetzt &lt;a href=&#34;http://www.heise.de/newsticker/meldung/Playstation-Network-nach-Angriff-voruebergehend-abgeschaltet-1232230.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PSN gehackt&lt;/a&gt;


und
&lt;a href=&#34;http://www.heise.de/newsticker/meldung/Anonymous-bezieht-Stellung-zum-PSN-Ausfall-1232323.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anonymous&lt;/a&gt;


will es nicht mal gewesen sein.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Als ich vor zwei Leben einmal einen Security-Job hatte wurde mir recht
schnell klar, daß man eine Security effektiv nicht sinnvoll gegen die Leute
umsetzen kann, mit denen man dort arbeiten muß. Es ist also notwendig, auf
eine positive und konstruktive Weise mit den Subjekten seiner Security
Policy (vulgo: &amp;ldquo;Der Community&amp;rdquo;) zusammenzuarbeiten. Der PSN-Hack ist
irgendwie ein Symptom von Sonys systematischen Fail sich eine Community
aufzubauen oder ihr Image in den relevanten Kreisen aufzupolieren.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vertrauenswürdigkeit öffentlicher Hardware</title>
      <link>https://blog.koehntopp.info/2011/02/16/vertrauensw-rdigkeit-ffentlicher-hardware.html</link>
      <pubDate>Wed, 16 Feb 2011 14:53:04 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2011/02/16/vertrauensw-rdigkeit-ffentlicher-hardware.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.theregister.co.uk/2011/02/15/hardware_keyloggers_manchester_libraries/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hardware keyloggers found in Manchester library PCs&lt;/a&gt;

 schreibt The Register:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hardware keyloggers have been discovered in public libraries in Greater
Manchester.Two USB devices, attached to keyboard sockets on the back of
computers in Wilmslow and Handforth libraries, would have enabled baddies
to record every keystroke made on compromised PCs. It&amp;rsquo;s unclear who placed
the snooping devices on the machines but the likely purpose was to capture
banking login credentials on the devices prior to their retrieval and use
in banking fraud.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Vor vielen Jahren stand in der Hauptpost in Kiel wie in vielen anderen
Postfilialen ein öffentliches BTX Terminal. Solche Geräte wurden zu dieser
Zeit dadurch realisiert, daß man ein Standard CEPT-Terminal mit einem
&lt;a href=&#34;http://de.wikipedia.org/wiki/Datei:Modem_DBT-03.jpg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DBT-03&lt;/a&gt;

 in ein Gehäuse
geschwartet hat und mit einer robusten Tastatur versehen hat.&lt;/p&gt;
&lt;p&gt;Öffentliche BTX-Terminals waren damals ein tolle Sache, weil man auf ihnen
private Nachrichten kostenlos versenden konnte, statt die damals üblichen 40
Pfennige pro Mail bezahlen zu müssen, und weil man auf ihnen sogenannte BTX
Regionalseiten abrufen konnte, ohne die damals üblichen 2 Pfennige pro Seite
bezahlen zu müssen (Und ihr fragt Euch noch, was Euch erwartet, wenn die
Netzwerkneutralität kippt?).&lt;/p&gt;
&lt;p&gt;Wenn man sich also in das BTX System mit der Teilnehmerkennung und dem
Paßwort eines öffentlichen Terminals einloggen könnte, dann war das schon
sehr attraktiv, damals.&lt;/p&gt;
&lt;p&gt;Der Schwachpunkt an der Angelegenheit war damals das DBT-03.&lt;/p&gt;
&lt;p&gt;Für die Post war das DBT-03 sehr attraktiv, weil es als spezielles BTX-Modem
die Teilnehmerkennung und das Paßwort in der Hardware eingebaut hatte und
man so an einem öffentlichen Terminal beim Verbindungsaufbau keinen Login
durchführen mußte. Für den Hacker war das DBT-03 attraktiv, weil das DBT-03
ist ein Ultrabillig-Modem gewesen ist, das für alles zu dumm war.&lt;/p&gt;
&lt;p&gt;Normale Modems heben beim Verbindungsaufbau ab und lauschen nach einem
Freizeichen. Nicht so das DBT-03. Das gebt ab und wählt los.&lt;/p&gt;
&lt;p&gt;Wenn man sich also nach der Schule um Punkt 15:00 am Terminal einfindet und
dann &amp;ldquo;Verbindungsaufbau&amp;rdquo; am Terminal drückt, dann legt das DBT-03 auf,
wartet und hebt wieder ab, um dann loszuwählen. Es wählt dabei von einem
Telefonanschluß los, dessen Rufndummer wie damals üblich mit seiner
BTX-Teilnehmerkennung identisch war. Ruft nun also ganz zufällig jemand
genau um 15:00 auf dieser Rufnummer an, dann hebt das DBT-03 ab, hört nicht
auf ein Freizeichen, und wählt los - dadurch wird die angenommene Verbindung
aber nicht mehr getrennt.&lt;/p&gt;
&lt;p&gt;Dann pfeift das DBT-03 seinen Carrier und bekommt die Gegenseite ans Rohr,
von der es glaubt, daß es die BTX Leitzentrale in Ulm sei. Die Gegenseite
sendet also eine BTX Startseite mit einem Usernamen-Feld, und das DBT-03
sendet brav seine Hardware-Teilnehmerkennung. Die Gegenseite pfeift ein
Paßwortfeld, und das DBT-03 sendet brav sein Paßwort. Die Gegenseite legt
auf.&lt;/p&gt;
&lt;p&gt;Wenige Stunden später sind circa zwei Dutzend öffentliche BTX-Terminals
Hauptpost Kiel simultan in Ulm eingeloggt.&lt;/p&gt;
&lt;p&gt;Natürlich fällt so etwas auf, und man reagiert darauf, indem man das Paßwort
des Zugangs ändert, d.h. die Modemhardware austauscht. Das behebt natürlich
nicht die Quelle des Angriffes - am nächsten Nachmittag steht also wieder
ein pickeliger Schülertypie im Parka am Gerät und drückt die &amp;ldquo;Trennen&amp;rdquo;- und
dann die &amp;ldquo;Verbindung aufbauen&amp;rdquo;-Taste und wenige Stunden später&amp;hellip;&lt;/p&gt;
&lt;p&gt;Nunja. Irgendwann mußte man am ÖBTX halt mit einer Telefonkarte bezahlen
statt den Dienst kostenlos nutzen zu können. Wie schade. Aber da gab es dann
auch schon USENET und Interessen verschoben sich.&lt;/p&gt;
&lt;p&gt;Warum ich die Geschichte erwähne? Auch damals standen gerne Leute am ÖBTX
und machten in der Hauptpost ihr BTX-basierendes Onlinebanking. Ich fand das
immer sehr leichtsinnig. Wer weiß schon, wer da am anderen Ende zuhört!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gruppenweises TOP N in MySQL: Der Tabellengrößenreport</title>
      <link>https://blog.koehntopp.info/2010/03/09/gruppenweises-top-n-in-mysql-der-tabellengr-enreport.html</link>
      <pubDate>Tue, 09 Mar 2010 15:47:19 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2010/03/09/gruppenweises-top-n-in-mysql-der-tabellengr-enreport.html</guid>
      <description>&lt;p&gt;Jeder Datenbankserver bei uns hat ein Script laufen, daß den Inhalt von
information_schema.tables jede Nacht einmal in eine Systemdatenbank in das
DBA Schema kopiert. Dort haben wir dba.table_sizes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sysmdb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dba&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_sizes&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_sizes&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_sizes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datadir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;CHARACTER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latin1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latin1_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;report_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;CHARACTER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latin1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latin1_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;CHARACTER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latin1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latin1_bin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_rows&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bigint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datadir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;report_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latin1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Gesucht war nun eine Query, die für jeden Sonntag eine Liste der 10 größten
Tabellen eines bestimmten Servers &amp;lsquo;master&amp;rsquo; für 2010 produziert.&lt;/p&gt;
&lt;p&gt;Die Lösung ist fragil insofern, als daß sie eine undokumentierte Eigenschaft
des Servers ausnutzt. Aber sie ist auch schnell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;report_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;report_date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;report_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_sizes&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;report_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%W&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Sunday&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;report_date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datadir&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/mysql/bp/data/&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table_schema&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bp&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;report_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wir definieren einen Zustandsspeicher @old, der das report_date der
folgenden Zeile speichert und einen Zähler @count. Sessionvariablen (die
@-Variablen da) haben einen impliziten Typ, und @old verhält sich anders
(falsch), wenn es mit 0 initalisiert wird.&lt;/p&gt;
&lt;p&gt;Im inneren SELECT zählen wir @count um eins hoch, wenn report_date sich
nicht ändert, oder setzen es auf 0, wenn report_date sich geändert hat. Der
&amp;lt;=&amp;gt;-Operator ist dabei failsafe gegenüber NULL-Werten. Danach, und das ist
wichtig, aktualisieren wir @old mit dem aktuellen report_date, und danach
geben wir die Werte aus, an denen wir interessiert sind. Die WHERE-Clause
der inneren Query wählt dabei die Daten aus, an denen wir interessiert sind:
Sonntage aus 2010, Daten vom Master, von der Instanz mit dem passenden
datadir, und dort aus dem passenden Schema. Das sortieren wir dann.&lt;/p&gt;
&lt;p&gt;Die Ausgabe hat nun eine laufende Nummer c, die aus dem Hochzählen von
@count resultiert. Dieser Zähler wird an report_date-Wechseln zurückgesetzt.
Mit der äußeren Query schneiden wir nun alle Werte ab, bei denen der Zähler
zu hoch ist.&lt;/p&gt;
&lt;p&gt;Die Query ist fragil, und ein übler Hack, da sie auf der internen
Ausführungsreihenfolge des SQL-Statements basiert. Sie kann bei jedem
Upgrade des Servers plötzlich fehlschlagen, weil sich Serverinterna ändern.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SCO Xenix 386 und mesg n</title>
      <link>https://blog.koehntopp.info/2009/01/06/sco-xenix-386-und-mesg-n.html</link>
      <pubDate>Tue, 06 Jan 2009 13:06:47 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2009/01/06/sco-xenix-386-und-mesg-n.html</guid>
      <description>&lt;p&gt;Früher in SCO Xenix gab es in deren Terminalemulation eine Escape-Sequenz, die eine Hardcopy des Screens auslöste.
Ein Programm konnte eine bestimmte Esc-Sequenz an ein Terminal senden und das Terminal hat dann seinen Bildschirminhalt Zeichen für Zeichen an die Anwendung zurückgesendet.&lt;/p&gt;
&lt;p&gt;Wenn also ein User auf Xenix eingeloggt war, und er in einer Shell stand, konnte man ihn mit dem Kommando &amp;ldquo;hello&amp;rdquo; oder &amp;ldquo;write&amp;rdquo; anchatten, ihm den Bildschirm löschen und ein Kommando in die linke obere Bildschirmecke drucken, danach dann eine Hardcopy-Sequenz senden.
Das Terminal hat dann den Bildschirminhalt, also das Kommando, an die Shell zurück reported.
Die Shell hat das Kommando dann ausgeführt.&lt;/p&gt;
&lt;p&gt;Da SCO Xenix nicht Open Source war, mußte man sich mit &amp;ldquo;mesg n&amp;rdquo; vor dem angechattet werden schützen.&lt;/p&gt;
&lt;p&gt;Dieser uralte Bug ist nun wiederbelebt worden:
Offenbar kann X11s xterm verschiedene Escape-Sequenzen ausführen, die bestimmte Dinge reporten.
Etwa den aktuellen Fenstertitel und den Gerätestatus.
Alle diese Dinge kann man vorher auf bestimmte Werte - Kommandos - setzen.
In
&lt;a href=&#34;http://www.heise.de/security/Terminal-Emulator-xterm-fuehrt-untergeschobene-Befehle-aus--/news/meldung/121196&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dem Heise Artikel&lt;/a&gt;


wird eine präparierte Datei erwähnt, aber solange &amp;ldquo;mesg y&amp;rdquo; aktiv ist, reicht wirklich ein &amp;ldquo;write&amp;rdquo; an diesen User zu senden (&amp;ldquo;cat escsequence | write username ttyname&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Schön, daß es das noch gibt.
Oder, um es mit Henry Spencer zu sagen, &amp;ldquo;Those who do not understand Unix are doomed to reinvent it. Poorly.&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cyborg</title>
      <link>https://blog.koehntopp.info/2008/08/29/cyborg.html</link>
      <pubDate>Fri, 29 Aug 2008 03:01:00 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2008/08/29/cyborg.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/cyborg.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Auf dem letzten CCC gab es einen ziemlich schlechten Vortrag zum Thema
&lt;a href=&#34;http://events.ccc.de/congress/2007/Fahrplan/events/2228.en.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cyborgs&lt;/a&gt;

.
Jedenfalls fand ich die These &amp;ldquo;Wir sind alle Cyborgs, weil wir jeden Tag
technische Hilfsmittel benutzen&amp;rdquo; ziemlich affig und so nicht haltbar.
Schließlich geht es bei einem Cyborg um die Integration von Technik und
Organik in einem symbiotischen Organismus.&lt;/p&gt;
&lt;p&gt;Auf der anderen Seite war hier im Haushalt am letzten Donnerstag das CPE der
DSL-Leitung kaputt gegangen und unser Haushalts-Server aus dem Netz gekippt.&lt;/p&gt;
&lt;p&gt;In Folge waren wir beide Haushaltsinsassen bis zum Eintreffen eines
Ersatzgerätes auf UMTS reduziert und ich habe bemerkt, wie sehr sich mein
Leben inzwischen um die ständige Verfügbarkeit von Bandbreite und CPU
gruppiert. Nicht nur, daß das Arbeiten von zu Hause einigermaßen anstrengend
ist, Mail nicht richtig geht und ich aus den diversen IM-Netzen kippe.&lt;/p&gt;
&lt;p&gt;Auch mein Freizeitverhalten ist betroffen: Ich meine, ich kann nicht mal
fernsehen, wenn ich nicht nebenbei meinen Laptop auf dem Schoß habe und ich
Wikipedia, IMDB und Google benutzen kann, um Informationen aus der Glotze um
das übliche Hintergrundrauschen von Tiefeninformation zu ergänzen.&lt;/p&gt;
&lt;p&gt;Und ich kann mich Leuten, mit denen ich mich unterhalte, nicht richtig
mitteilen, wenn ich an die URLs nicht komme, mit denen ich sie bewerfen
will, um Kontext herzustellen. Oder wenn ich den Kontakt zu den Menschen,
die mir wichtig sind, nicht halten kann, weil nicht genug Netz da ist, um
sie zu erreichen.&lt;/p&gt;
&lt;p&gt;Insofern: Manche würden es Internetsüchtig nennen, aber das ist eine
Verkennung der Tatsachen. Ich &lt;em&gt;bin&lt;/em&gt; ein Cyborg. Ohne das Netz bin ich ein
beschränkteres, kleineres und weniger mächtiges Wesen, alleine und einsam
gefangen in den toten, offlinen Wänden meines Heims. Vielleicht ist an
einigen Aspekten von diesem Cyborg-Vortrag doch mehr dran, als der Schwall
nebulösen Gelabers dort vermuten läßt. Ich muß mir den Stream noch mal
runter laden und in Ruhe ansehen.&lt;/p&gt;
&lt;p&gt;Gleich mal den Torrent anwerfen. Das Netz geht ja wieder.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Warum Hacker sich als Bürgerrechtler verstehen</title>
      <link>https://blog.koehntopp.info/2008/01/07/warum-hacker-sich-als-b-rgerrechtler-verstehen.html</link>
      <pubDate>Mon, 07 Jan 2008 14:57:36 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2008/01/07/warum-hacker-sich-als-b-rgerrechtler-verstehen.html</guid>
      <description>&lt;p&gt;Die  &lt;a href=&#34;http://www.welt.de/webwelt/article1526108/Warum_Hacker_sich_als_Buergerrechtler_verstehen.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Welt&lt;/a&gt;


thematisiert das schon seit längerem gewandelte Profil des Chaos Computer
Clubs jetzt auch im Mainstream. Denn der Berliner CCC ist im Gegensatz zum
alten Hamburger CCC viel extrovertierter politisch:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Die Bewegung bestand einst aus Spontis und Untergrundkämpfern, die aus
Freude an der Sache digitale Netze knackten. Nun aber ist sie politisch
geworden. An den Wänden und auf den Rucksäcken kleben Schilder mit dem
Gesicht von Innenminister Schäuble und der Aufschrift „Stasi
2.0“. Ein lebensgroßes Holzpferd in Schwarz-Rot-Gold soll den
„Bundestrojaner“ symbolisieren – jenen Virus, den die
Behörden bald auf private PCs schicken wollen, um sie online zu
durchsuchen.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Hacker, so resümiert die Welt, sind heute nicht mehr Techniker, die nachts
in fremde Computer einbrechen, sondern Bürgerrechtler. Und vermutet dann:
&amp;ldquo;Vielleicht ist das der Grund, weshalb sie seit zwei Jahren so viel Zulauf
haben.&amp;rdquo; und schließt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Heute übernehmen Hacker ganz bewusst zivilgesellschaftliche Verantwortung.
Der CCC zeigte öffentlich, dass Handys nicht sicher sind, dass Kredit- und
EC-Karten ausgespäht werden können, dass Wahlcomputer manipulierbar sind.&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Rechte und Inhaber - wen juckt&#39;s?</title>
      <link>https://blog.koehntopp.info/2006/01/24/rechte-und-inhaber-wen-juckt-s.html</link>
      <pubDate>Tue, 24 Jan 2006 18:01:08 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2006/01/24/rechte-und-inhaber-wen-juckt-s.html</guid>
      <description>&lt;p&gt;Wer die
&lt;a href=&#34;https://blog.koehntopp.info/2006/01/24/rechte-und-inhaber-wen-juckt-s.html&#34;&gt;Ereignisse rund um das Sony Rootkit&lt;/a&gt;


verfolgt hat, der weiß schon, daß es Rechteinhaber mit dem Urheberrecht selbst nicht so genau nehmen und zum Beispiel schon mal gerne GPL Sourcecode ohne Beachtung der Lizenzbestimmungen in ihre Software einbauen, bevor sie diese ungefragt und getarnt auf fremden Rechnern einschmuggeln.&lt;/p&gt;
&lt;p&gt;Da ist es nur konsequent, wenn ausgerechnet die Oberschreihälse und Raubkopiererjäger von der
&lt;a href=&#34;http://www.heise.de/newsticker/meldung/68760&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gesellschaft zur Verfolgung von Urheberrechtsverletzungen (GVU)&lt;/a&gt;


(no less!) vom Staatsanwalt hausdurcht werden.
Heise schreibt dazu:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Die Staatsanwaltschaft Ellwangen verdächtigt die private Fahndungsorganisation der Film- und Softwareindustrie, die Verbreitung sogenannter Warez aktiv unterstützt zu haben.
Ermittlungsbeamte des Landeskriminalamts Baden-Württemberg durchsuchten am heutigen Dienstag die Hamburger Geschäftsräume der Gesellschaft und die Wohnung eines hochrangigen Mitarbeiters. &amp;hellip;
Sollte es zutreffen, dass die GVU die Infrastruktur der Raubkopierer mitfinanziert hat, würde dies einen Verdacht auf eine strafrechtlich relevante Beihilfe zur Verbreitung von Warez-Material begründen.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Vor diesem Hintergrund ebenfalls lesenswert:
&lt;a href=&#34;http://www.spiegel.de/spiegel/0,1518,396497,00.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Der Fluch der Silberlinge&lt;/a&gt;

 -
Spiegel Online zum 2. Korb der Urheberrechtsnovelle und zur GVU:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Allein die GVU beschäftigt zehn Rechercheure, fast alles ehemalige Polizisten.
Stolz bezeichnet Geschäftsführer und Ex-Kommissar Jochen Tielke seine Gesellschaft auch schon einmal als &amp;ldquo;kleines BKA für Urheberrechtsverletzungen&amp;rdquo;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Wer ist die GVU?
&lt;a href=&#34;http://www.netzpolitik.org/2006/die-gvu-wurde-von-der-polizei-durchsucht/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mitgliederliste der GVU&lt;/a&gt;


bei netzpolitik.org.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Künstler vs. Sony</title>
      <link>https://blog.koehntopp.info/2005/11/24/k-nstler-vs-sony.html</link>
      <pubDate>Thu, 24 Nov 2005 15:20:59 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2005/11/24/k-nstler-vs-sony.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/sonyelectronics.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Was sagen die Künstler, deren Werke von Sony mit dem illegalen Rootkit
verschönert worden sind, dazu und was macht die Sony Affäre mit deren
Einnahmen?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://businessweek.com/technology/content/nov2005/tc20051122_343542.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Businessweek&lt;/a&gt;

 schreibt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Van Zant&amp;rsquo;s Get Right with the Man CD was released in May, but six months
later it still was doing better-than-respectable business on Amazon.com.
The album ranked No. 887 on the online retailer&amp;rsquo;s list of music sales on
Nov. 2. &amp;hellip; GROWING OUTRAGE. Overnight, Get Right with the Man dropped to
No. 1,392 on Amazon&amp;rsquo;s music rankings. By Nov. 22 &amp;ndash; after the news made
headlines and Sony was deep into damage control, pulling some 4.7 million
copy-protected disks from the market &amp;ndash; Get Right with the Man was even
further from Amazon&amp;rsquo;s Top 40, plummeting to No. 25,802.The wrath of fans
killed Sony&amp;rsquo;s CD copy controls, with the company pulling 52 titles off
retail shelves, beginning the week of Nov. 14. But the wrath of bands
could be far worse for the company &amp;ndash; and for efforts to protect content
in general.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(via &lt;a href=&#34;http://www.julian-finn.de/blog/index.php?/archives/491-Mal-wieder-Rootkit.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Julian Finn&lt;/a&gt;

)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EFF vs. Sony</title>
      <link>https://blog.koehntopp.info/2005/11/22/eff-vs-sony.html</link>
      <pubDate>Tue, 22 Nov 2005 08:13:30 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2005/11/22/eff-vs-sony.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/sonyelectronics.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Fred schickt mir den folgenden Link:
&lt;a href=&#34;http://www.eff.org/news/archives/2005_11.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EFF Files Class Action Lawsuit Against Sony BMG&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Electronic Frontier Foundation (EFF), along with two leading national
class action law firms, today filed a lawsuit against Sony BMG, demanding
that the company repair the damage done by the First4Internet XCP and
SunnComm MediaMax software it included on over 24 million music
CDs&amp;hellip;.Both the XCP and MediaMax CDs include outrageous, anti-consumer
terms in their &amp;ldquo;clickwrap&amp;rdquo; EULAs. For example, if purchasers declare
personal bankruptcy, the EULA requires them to delete any digital copies
on their computers or portable music players. The same is true if a
customer&amp;rsquo;s house gets burglarized and his CDs stolen, since the EULA
allows purchasers to keep copies only so long as they retain physical
possession of the original CD. EFF is demanding that Sony BMG remove these
unconscionable terms from its EULAs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Wohl denen, die ihre Musik sicherheitshalber lieber eseln. Da sind die
Risiken leichter einzuschätzen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSO vs. Sony</title>
      <link>https://blog.koehntopp.info/2005/11/06/cso-vs-sony.html</link>
      <pubDate>Sun, 06 Nov 2005 13:11:35 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2005/11/06/cso-vs-sony.html</guid>
      <description>&lt;p&gt;Update zu
&lt;a href=&#34;https://blog.koehntopp.info/2005/11/04/nuetzliche-kombinationen.html&#34;&gt;Nützliche Kombinationen&lt;/a&gt;

:&lt;/p&gt;
&lt;p&gt;Als Chief Security Officer ist man natürlich verantwortlich dafür
festzulegen, welche Software auf den Rechnern einer Firma installiert werden
darf. Ein Rootkit gehört sicherlich nicht dazu. Welche CDs sind also für das
Hören in der Firma zu verbieten, weil sie sonst Firmenrechner verseuchen?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.theinquirer.net/?article=27474&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hier die Antwort von Sony mit der kompletten Liste&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every Sony BMG release starting April 1, 2004 has been suject to content
protection technology.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Für die Kosten für das Entfernen bereits installierter Rootkits
wahrscheinlich der Arbeitnehmer aufzukommen, der die CD ins Laufwerk
geschoben hat, und der kann dann versuchen, diese an Sony weiter zu reichen -
so schätze ich jedenfalls die Rechtslage ein, aber ich bin kein Jurist.
Vielleicht mag jemand mit mehr Ahnung von der Sache mal dazu Stellung
nehmen?&lt;/p&gt;
&lt;p&gt;Wie sagt
&lt;a href=&#34;http://www.tagesschau.de/aktuell/meldungen/0,1185,OID4925660_REF1,00.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;die Tagesschau&lt;/a&gt;

 so schön:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wohlgemerkt: Alle die unerwünschten Nebenwirkungen und Gefahren treten nur
bei den Nutzern auf, die die CD legal erworben haben. Wer die Musikstücke
als Raubkopien runtergeladen hat, hat derlei Ungemach nicht zu befürchten.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Dem ist wohl nix mehr hinzuzufügen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nützliche Kombinationen</title>
      <link>https://blog.koehntopp.info/2005/11/04/nuetzliche-kombinationen.html</link>
      <pubDate>Fri, 04 Nov 2005 07:52:53 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2005/11/04/nuetzliche-kombinationen.html</guid>
      <description>&lt;p&gt;Das Sony BMG Rootkit aus
&lt;a href=&#34;https://blog.koehntopp.info/2005/11/01/legal-illegal-scheissegal.html&#34;&gt;Legal, Illegal, Scheißegal&lt;/a&gt;


hat eine dicke Spur von Artikeln nach sich gezogen. Sony bietet jetzt ein
Toolkit an, mit dem man die Rootkit-Funktionen deinstallieren kann, der
Filtertreiber (den man in der EULA dennoch nicht abgenickt hat) bleibt aber
drin. Das ist sehr gnädig von Sony BMG.&lt;/p&gt;
&lt;p&gt;In
&lt;a href=&#34;http://www.securityfocus.com/brief/34&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;World of Warcraft hackers using Sony BMG rootkit&lt;/a&gt;


auf Securityfocus wird inzwischen von einer sinnvollen Anwendung des Sony
BMG Rootkits berichtet: Es ist offenbar problemlos möglich, auf einer
Maschine, die mit einer Sony CD verseucht worden ist, Cheats für World of
Warcraft zu installieren, die von der Spyware, die Blizzard mit dem Spiel
zusammen installiert, nicht entdeckt werden kann.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Und so verwenden wir unwürdige Konsumenten die Teile, die uns die mächtigen
Megacorps zuwerfen in einer kreativen und nutzbringenden Weise.&amp;rdquo; &amp;ndash;
irgendwie ist das alles sehr Shadowrun. Abzurunden wäre dies jetzt nur noch,
indem Blizzard Sony BMG verklagt, weil das Sony BMG Rootkit so irgendwelche
Ansprüche von Blizzard und World of Warcraft verletzt.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sony BMG and First 4 Internet, the maker of the content protection
technology, have both disputed claims that their system could harm the
security of a Windows system. Yet, other software makers that rely on the
integrity of the operating system are finding that hidden code makes
security impossible.&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Legal, Illegal, Scheißegal...</title>
      <link>https://blog.koehntopp.info/2005/11/01/legal-illegal-scheissegal.html</link>
      <pubDate>Tue, 01 Nov 2005 12:35:56 +0000</pubDate><author>kris-blog@koehntopp.de (Kristian Köhntopp)</author>

      <guid>https://blog.koehntopp.info/2005/11/01/legal-illegal-scheissegal.html</guid>
      <description>&lt;p&gt;Sony BMG baut ein Rootkit, um damit das ihrer Meinung nach illegale Kopieren
von Dateien auf den Rechnern ihrer Kunden zu verhindern. Die Software
gefährdet die Stabilität der Kundensysteme, ist nicht Bestandteil der
Lizenzvereinbarung und tut mehr, als sie für die Erreichung ihres Ziels tun
müßte. Die
&lt;a href=&#34;http://www.heise.de/newsticker/meldung/65602&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Meldung bei Heise&lt;/a&gt;

 zieht man das folgende Fazit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In den Lizenzvereinbarungen (EULA) der CD – der man zustimmen muss,
damit die darauf befindliche Abspiel-Software für PCs startet - steht laut
Russinovich nichts davon, dass eine Software installiert würde oder sich
gar tief im System verankert. In der Diskussion zur Sysinternals-Meldung
werfen Teilnehmer ein, dass dieses Vorgehen des Kopierschutzes wohl in
Kalifornien nach dem California Business &amp;amp; Protections Code Section
22947.3 illegal sei und mit bis zu 1.000 US-Dollar Strafe pro betroffenem
Computer geahndet werden könne.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Da sind zivile Forderungen wegen entstandener Schäden und Inkompatibilitäten
wohl noch nicht drin eingerechnet.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
